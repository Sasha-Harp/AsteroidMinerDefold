function on_message(self, message_id, message, sender)
	if message_id == hash("destroy") then
		for i = 1, math.random(6, 10) do
			local scale = math.random()+0.9
			factory.create("#factory", nil, nil, {direction = math.random()*math.pi*2, in_speed = math.random(10.0, 20.0)}, scale)
		end
		go.delete(".")
	end
end

function init(self)
	math.randomseed(100000000000000 * (socket.gettime() % 1))
	sprite.play_flipbook("#sprite", hash("asteroid" .. math.random(0, 9)))
-- 	self.heat = 0.0
-- 	self.isHit = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
-- 	if self.isHit then
-- 		self.heat = self.heat + 1.1 * dt
-- 		if self.heat > 1 then
-- 			self.destroy()
-- 		end
-- 	end
-- 	self.heat = math.max(0, self.heat - 0.3*dt)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
